export default {
  INTERNAL_SERVER_ERROR: 'Oops, something broke on the server!!!',
  DB_ERROR_STATUS: 'DB_PROCESS_FAILED',
  MODULE_ERROR_STATUS: 'MODULE_PROCESS_BROKE',
  SUCCESS: 'success',
  SUCCESS_RESPONSE: 'Request was successfully processed',
  FAIL: 'fail',
  WELCOME: 'Thanks for dropping by',
  v1: '/api/v1',
  DB_ERROR: 'A database error occurred, either in redis or postgres',
  MODULE_ERROR: 'A module error occurred',
  NOT_FOUND_API: 'Oops, You have reached a dead end',
  AUTH_REQUIRED: 'Access denied, a valid access token is required',
  INVALID_VALIDATION_REQUEST: 'Verification type does not match with body sent',
  INVALID_PERMISSION: 'Permission denied. Invalid credentials provided',
  ACCESS_REVOKED: 'ACCESS REVOKED',
  INVALID_CREDENTIALS: 'Incorrect login details',
  SIGN_UP_CONFLICT: 'Email Already Exist',
  LOGIN_USER_SUCCESSFULLY: 'Client logged in successfully',
  RESOURCE_UPDATE_ERROR_STATUS: (resource: string): string => `${resource}_UPDATE_ERROR`,
  RESOURCE_DELETE_SUCCESS: (resource: string): string => `${resource} deleted successfully`,
  RESOURCE_DELETE_FAIL: (resource: string): string => `Error while deleting ${resource}`,
  RESOURCE_DELETE_FAIL_STATUS: (resource: string): string => `ERROR DELETING ${resource}`,
  FETCH_DATA_SUCCESS: (schema: string): string => `${schema} retrieved successfully`,
  FETCH_DATA_ERROR: (schema: string): string => `ERROR_RETRIEVING_${schema}`,
  FETCH_DATA_ERROR_MSG: (schema: string): string => `Error retrieving ${schema}. This is from us not you`,
  PARAM_ABSENT: (schema: string): string => `Please provide a valid ${schema}`,
  RESOURCE_NOT_FOUND: (resource: string): string => `${resource} not found`,
  RESOURCE_ALREADY_EXIST: (resource: string): string => `${resource} exists already`,
  RESOURCE_CREATE_SUCCESS: (resource: string): string => `${resource} created successfully`,
  RESOURCE_CREATE_ERROR_STATUS: (resource: string): string => `${resource}_CREATE_ERROR`,
  RESOURCE_FETCH_ERROR_STATUS: (resource: string): string => `${resource}_FETCH_ERROR`,
  RESOURCE_FETCH_SUCCESS: (resource: string): string => `${resource} fetched successfully`,
  RESOURCE_EXIST_VERIFICATION_FAIL: (resource: string): string => `${resource}_EXIST_VERIFICATION_FAIL`,
  RESOURCE_UPDATE_SUCCESS: (resource: string): string => `${resource} updated successfully`,
  RESOURCE_UPDATE_FAIL: (resource: string): string => `Error while updating ${resource}`,
  RESOURCE_UPDATE_FAIL_STATUS: (resource: string): string => `${resource}_UPDATE_FAIL`,
  RESOURCE_NOT_PROVIDED: (resource: string): string => `No ${resource} provided`,
  RESOURCE_CREATE_ERROR: (resource: string): string => `Failed to create ${resource}. It is not you, it is us.`,
};
